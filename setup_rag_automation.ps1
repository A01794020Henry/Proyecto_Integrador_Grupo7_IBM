# Scripts de Automatizaci√≥n para Configuraci√≥n RAG IBM watsonx
# Archivo de utilidades para facilitar la configuraci√≥n paso a paso

Write-Host "üöÄ DECODE-EV RAG - Scripts de Configuraci√≥n Automatizada" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

# Funci√≥n para verificar prerrequisitos
function Test-Prerequisites {
    Write-Host "üîç Verificando prerrequisitos del sistema..." -ForegroundColor Yellow
    
    # Verificar Python
    try {
        $pythonVersion = python --version 2>&1
        if ($pythonVersion -match "Python (\d+)\.(\d+)") {
            $majorVersion = [int]$matches[1]
            $minorVersion = [int]$matches[2]
            if ($majorVersion -ge 3 -and $minorVersion -ge 9) {
                Write-Host "‚úÖ Python $($matches[0]) - OK" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Python version debe ser 3.9 o superior. Encontrado: $($matches[0])" -ForegroundColor Red
                return $false
            }
        }
    } catch {
        Write-Host "‚ùå Python no est√° instalado o no est√° en PATH" -ForegroundColor Red
        return $false
    }
    
    # Verificar Git
    try {
        $gitVersion = git --version 2>&1
        Write-Host "‚úÖ $gitVersion - OK" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Git no est√° instalado o no est√° en PATH" -ForegroundColor Red
        return $false
    }
    
    # Verificar pip
    try {
        $pipVersion = pip --version 2>&1
        Write-Host "‚úÖ $pipVersion - OK" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå pip no est√° disponible" -ForegroundColor Red
        return $false
    }
    
    # Verificar conectividad
    try {
        Test-Connection -ComputerName "ibm.com" -Count 1 -Quiet | Out-Null
        Write-Host "‚úÖ Conectividad a IBM Cloud - OK" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå No hay conectividad a IBM Cloud" -ForegroundColor Red
        return $false
    }
    
    return $true
}

# Funci√≥n para configurar entorno virtual
function New-VirtualEnvironment {
    param(
        [string]$EnvName = "venv_rag_watsonx"
    )
    
    Write-Host "üîß Configurando entorno virtual: $EnvName" -ForegroundColor Yellow
    
    # Crear entorno virtual
    try {
        python -m venv $EnvName
        Write-Host "‚úÖ Entorno virtual creado: $EnvName" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error creando entorno virtual: $_" -ForegroundColor Red
        return $false
    }
    
    # Activar entorno virtual
    try {
        & ".\$EnvName\Scripts\Activate.ps1"
        Write-Host "‚úÖ Entorno virtual activado" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error activando entorno virtual: $_" -ForegroundColor Red
        return $false
    }
    
    # Actualizar pip
    try {
        python -m pip install --upgrade pip --quiet
        Write-Host "‚úÖ pip actualizado" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error actualizando pip: $_" -ForegroundColor Red
        return $false
    }
    
    return $true
}

# Funci√≥n para instalar dependencias
function Install-ProjectDependencies {
    Write-Host "üì¶ Instalando dependencias del proyecto..." -ForegroundColor Yellow
    
    # Verificar requirements.txt
    if (-not (Test-Path "requirements.txt")) {
        Write-Host "‚ùå Archivo requirements.txt no encontrado" -ForegroundColor Red
        return $false
    }
    
    try {
        pip install -r requirements.txt --quiet
        Write-Host "‚úÖ Dependencias instaladas exitosamente" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error instalando dependencias: $_" -ForegroundColor Red
        return $false
    }
    
    # Verificar instalaci√≥n de paquetes cr√≠ticos
    $criticalPackages = @("ibm-watson-machine-learning", "ibm-watson", "langchain", "streamlit")
    
    foreach ($package in $criticalPackages) {
        try {
            pip show $package --quiet
            Write-Host "‚úÖ $package - Instalado" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå $package - No instalado correctamente" -ForegroundColor Red
            return $false
        }
    }
    
    return $true
}

# Funci√≥n para crear archivo .env
function New-EnvironmentFile {
    Write-Host "‚öôÔ∏è Creando archivo de configuraci√≥n .env..." -ForegroundColor Yellow
    
    $envTemplate = @"
# ===========================================
# CONFIGURACI√ìN IBM WATSONX PARA DECODE-EV
# ===========================================

# IBM watsonx.ai Configuration
WATSONX_API_KEY=tu_watsonx_api_key_aqui
WATSONX_PROJECT_ID=tu_project_id_aqui
WATSONX_URL=https://us-south.ml.cloud.ibm.com

# Watson Discovery Configuration
DISCOVERY_API_KEY=tu_discovery_api_key_aqui
DISCOVERY_ENVIRONMENT_ID=tu_environment_id_aqui
DISCOVERY_COLLECTION_ID=tu_collection_id_aqui
DISCOVERY_URL=https://api.us-south.discovery.watson.cloud.ibm.com

# Modelos IBM watsonx
EMBEDDING_MODEL=ibm/slate-125m-english-rtrvr
LLM_MODEL=ibm/granite-13b-chat-v2
RERANKER_MODEL=ibm/slate-125m-english-rtrvr

# Configuraci√≥n del Sistema
ENVIRONMENT=development
LOG_LEVEL=INFO
MAX_TOKENS=2048
TEMPERATURE=0.3
TOP_K=5
TOP_P=0.9

# Configuraci√≥n de Vector Store
VECTOR_STORE_TYPE=milvus
VECTOR_DIMENSION=768
SIMILARITY_THRESHOLD=0.7

# Configuraci√≥n de Dashboard
STREAMLIT_SERVER_PORT=8501
STREAMLIT_SERVER_ADDRESS=localhost
ENABLE_WIDE_MODE=true

# Configuraci√≥n de Logging
LOG_FILE=decode_ev_rag.log
LOG_ROTATION=daily
LOG_RETENTION_DAYS=30
"@

    try {
        $envTemplate | Out-File -FilePath ".env" -Encoding UTF8
        Write-Host "‚úÖ Archivo .env creado exitosamente" -ForegroundColor Green
        Write-Host "‚ö†Ô∏è  IMPORTANTE: Editar .env con tus credenciales reales" -ForegroundColor Yellow
        return $true
    } catch {
        Write-Host "‚ùå Error creando archivo .env: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para validar credenciales
function Test-Credentials {
    Write-Host "üîê Validando credenciales..." -ForegroundColor Yellow
    
    try {
        python -c @"
import os
from dotenv import load_dotenv
load_dotenv()

# Verificar variables requeridas
required_vars = [
    'WATSONX_API_KEY',
    'WATSONX_PROJECT_ID',
    'DISCOVERY_API_KEY',
    'DISCOVERY_ENVIRONMENT_ID'
]

missing_vars = []
for var in required_vars:
    if not os.getenv(var) or os.getenv(var) == f'tu_{var.lower()}_aqui':
        missing_vars.append(var)

if missing_vars:
    print('‚ùå Credenciales faltantes:', ', '.join(missing_vars))
    exit(1)
else:
    print('‚úÖ Todas las credenciales configuradas')
    exit(0)
"@
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Credenciales validadas correctamente" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Hay credenciales faltantes o incorrectas" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error validando credenciales: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para ejecutar configuraci√≥n inicial
function Start-WatsonxSetup {
    Write-Host "üîß Ejecutando configuraci√≥n inicial de watsonx..." -ForegroundColor Yellow
    
    try {
        python 01_watsonx_setup.py
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Configuraci√≥n de watsonx completada" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Error en configuraci√≥n de watsonx" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error ejecutando setup de watsonx: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para integrar dataset
function Start-DatasetIntegration {
    Write-Host "üìä Integrando dataset DECODE-EV..." -ForegroundColor Yellow
    
    $datasetPath = "..\Ingenieria_de_Caracteristicas\dataset_rag_decode_ev.jsonl"
    
    if (-not (Test-Path $datasetPath)) {
        Write-Host "‚ùå Dataset no encontrado en: $datasetPath" -ForegroundColor Red
        Write-Host "‚ÑπÔ∏è  Ejecutar primero el notebook de Feature Engineering" -ForegroundColor Blue
        return $false
    }
    
    try {
        python 02_dataset_integration.py --dataset-path $datasetPath
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Dataset integrado exitosamente" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Error integrando dataset" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error ejecutando integraci√≥n de dataset: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para ejecutar pruebas
function Start-SystemTests {
    Write-Host "üß™ Ejecutando suite de pruebas..." -ForegroundColor Yellow
    
    try {
        python 05_testing_suite.py
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Todas las pruebas pasaron exitosamente" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Algunas pruebas fallaron" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error ejecutando pruebas: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para iniciar dashboard
function Start-Dashboard {
    Write-Host "üåê Iniciando dashboard Streamlit..." -ForegroundColor Yellow
    
    try {
        Write-Host "üìç Dashboard estar√° disponible en: http://localhost:8501" -ForegroundColor Cyan
        Write-Host "‚èπÔ∏è  Presionar Ctrl+C para detener el dashboard" -ForegroundColor Yellow
        streamlit run 04_streamlit_dashboard.py
    } catch {
        Write-Host "‚ùå Error iniciando dashboard: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n principal de configuraci√≥n autom√°tica
function Start-AutomaticSetup {
    Write-Host "ü§ñ Iniciando configuraci√≥n autom√°tica completa..." -ForegroundColor Magenta
    Write-Host "=================================================" -ForegroundColor Magenta
    
    # Paso 1: Verificar prerrequisitos
    if (-not (Test-Prerequisites)) {
        Write-Host "‚ùå Prerrequisitos no cumplidos. Abortando configuraci√≥n." -ForegroundColor Red
        return
    }
    
    # Paso 2: Configurar entorno virtual
    if (-not (New-VirtualEnvironment)) {
        Write-Host "‚ùå Error configurando entorno virtual. Abortando." -ForegroundColor Red
        return
    }
    
    # Paso 3: Instalar dependencias
    if (-not (Install-ProjectDependencies)) {
        Write-Host "‚ùå Error instalando dependencias. Abortando." -ForegroundColor Red
        return
    }
    
    # Paso 4: Crear archivo .env
    if (-not (Test-Path ".env")) {
        New-EnvironmentFile
        Write-Host "‚ö†Ô∏è  PAUSA: Edita el archivo .env con tus credenciales reales antes de continuar" -ForegroundColor Yellow
        Write-Host "üìù Presiona cualquier tecla cuando hayas completado la configuraci√≥n de credenciales..." -ForegroundColor Yellow
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    }
    
    # Paso 5: Validar credenciales
    if (-not (Test-Credentials)) {
        Write-Host "‚ùå Credenciales no v√°lidas. Por favor, revisa el archivo .env" -ForegroundColor Red
        return
    }
    
    # Paso 6: Configurar watsonx
    if (-not (Start-WatsonxSetup)) {
        Write-Host "‚ùå Error en configuraci√≥n de watsonx" -ForegroundColor Red
        return
    }
    
    # Paso 7: Integrar dataset
    if (-not (Start-DatasetIntegration)) {
        Write-Host "‚ö†Ô∏è  Dataset no integrado. Puedes hacerlo manualmente despu√©s." -ForegroundColor Yellow
    }
    
    # Paso 8: Ejecutar pruebas
    if (-not (Start-SystemTests)) {
        Write-Host "‚ö†Ô∏è  Algunas pruebas fallaron. Revisar configuraci√≥n." -ForegroundColor Yellow
    }
    
    Write-Host "üéâ Configuraci√≥n autom√°tica completada!" -ForegroundColor Green
    Write-Host "üìã Pr√≥ximos pasos:" -ForegroundColor Cyan
    Write-Host "   1. Ejecutar: Start-Dashboard para iniciar el dashboard" -ForegroundColor White
    Write-Host "   2. Navegar a: http://localhost:8501" -ForegroundColor White
    Write-Host "   3. Realizar consultas de prueba" -ForegroundColor White
}

# Funci√≥n de diagn√≥stico del sistema
function Get-SystemDiagnosis {
    Write-Host "üîç DIAGN√ìSTICO DEL SISTEMA DECODE-EV RAG" -ForegroundColor Cyan
    Write-Host "=======================================" -ForegroundColor Cyan
    
    # Informaci√≥n del sistema
    Write-Host "üíª Sistema Operativo: $((Get-CimInstance Win32_OperatingSystem).Caption)" -ForegroundColor White
    Write-Host "üêç Versi√≥n Python: $(python --version 2>&1)" -ForegroundColor White
    
    # Estado del entorno virtual
    if ($env:VIRTUAL_ENV) {
        Write-Host "üåê Entorno Virtual: Activo ($env:VIRTUAL_ENV)" -ForegroundColor Green
    } else {
        Write-Host "üåê Entorno Virtual: No activo" -ForegroundColor Yellow
    }
    
    # Verificar archivos del proyecto
    $projectFiles = @("01_watsonx_setup.py", "02_dataset_integration.py", "03_core_rag_system.py", "04_streamlit_dashboard.py", "05_testing_suite.py", "requirements.txt", ".env")
    
    Write-Host "üìÅ Archivos del Proyecto:" -ForegroundColor White
    foreach ($file in $projectFiles) {
        if (Test-Path $file) {
            Write-Host "   ‚úÖ $file" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå $file" -ForegroundColor Red
        }
    }
    
    # Verificar dependencias cr√≠ticas
    if ($env:VIRTUAL_ENV) {
        Write-Host "üì¶ Dependencias Cr√≠ticas:" -ForegroundColor White
        $criticalPackages = @("ibm-watson-machine-learning", "ibm-watson", "langchain", "streamlit")
        
        foreach ($package in $criticalPackages) {
            try {
                pip show $package --quiet 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "   ‚úÖ $package" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ùå $package" -ForegroundColor Red
                }
            } catch {
                Write-Host "   ‚ùå $package" -ForegroundColor Red
            }
        }
    }
    
    # Verificar configuraci√≥n
    if (Test-Path ".env") {
        try {
            python -c @"
import os
from dotenv import load_dotenv
load_dotenv()

required_vars = ['WATSONX_API_KEY', 'WATSONX_PROJECT_ID', 'DISCOVERY_API_KEY']
print('‚öôÔ∏è  Configuraci√≥n:')
for var in required_vars:
    value = os.getenv(var)
    if value and value != f'tu_{var.lower()}_aqui':
        print(f'   ‚úÖ {var}')
    else:
        print(f'   ‚ùå {var}')
"@
        } catch {
            Write-Host "‚öôÔ∏è  Configuraci√≥n: ‚ùå Error leyendo .env" -ForegroundColor Red
        }
    } else {
        Write-Host "‚öôÔ∏è  Configuraci√≥n: ‚ùå Archivo .env no encontrado" -ForegroundColor Red
    }
}

# Men√∫ principal interactivo
function Show-MainMenu {
    while ($true) {
        Clear-Host
        Write-Host "üöÄ DECODE-EV RAG - IBM watsonx Configuration" -ForegroundColor Green
        Write-Host "============================================" -ForegroundColor Green
        Write-Host ""
        Write-Host "Selecciona una opci√≥n:" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "1.  üîç Verificar prerrequisitos" -ForegroundColor White
        Write-Host "2.  üîß Configurar entorno virtual" -ForegroundColor White
        Write-Host "3.  üì¶ Instalar dependencias" -ForegroundColor White
        Write-Host "4.  ‚öôÔ∏è  Crear archivo .env" -ForegroundColor White
        Write-Host "5.  üîê Validar credenciales" -ForegroundColor White
        Write-Host "6.  üõ†Ô∏è  Configurar watsonx" -ForegroundColor White
        Write-Host "7.  üìä Integrar dataset" -ForegroundColor White
        Write-Host "8.  üß™ Ejecutar pruebas" -ForegroundColor White
        Write-Host "9.  üåê Iniciar dashboard" -ForegroundColor White
        Write-Host "10. ü§ñ Configuraci√≥n autom√°tica completa" -ForegroundColor Magenta
        Write-Host "11. üîç Diagn√≥stico del sistema" -ForegroundColor Cyan
        Write-Host "0.  ‚ùå Salir" -ForegroundColor Red
        Write-Host ""
        
        $choice = Read-Host "Ingresa tu opci√≥n (0-11)"
        
        switch ($choice) {
            "1" { Test-Prerequisites; Read-Host "Presiona Enter para continuar" }
            "2" { New-VirtualEnvironment; Read-Host "Presiona Enter para continuar" }
            "3" { Install-ProjectDependencies; Read-Host "Presiona Enter para continuar" }
            "4" { New-EnvironmentFile; Read-Host "Presiona Enter para continuar" }
            "5" { Test-Credentials; Read-Host "Presiona Enter para continuar" }
            "6" { Start-WatsonxSetup; Read-Host "Presiona Enter para continuar" }
            "7" { Start-DatasetIntegration; Read-Host "Presiona Enter para continuar" }
            "8" { Start-SystemTests; Read-Host "Presiona Enter para continuar" }
            "9" { Start-Dashboard }
            "10" { Start-AutomaticSetup; Read-Host "Presiona Enter para continuar" }
            "11" { Get-SystemDiagnosis; Read-Host "Presiona Enter para continuar" }
            "0" { Write-Host "üëã ¬°Hasta luego!" -ForegroundColor Green; break }
            default { Write-Host "‚ùå Opci√≥n inv√°lida. Intenta de nuevo." -ForegroundColor Red; Start-Sleep 2 }
        }
    }
}

# Ejecutar men√∫ principal si el script se ejecuta directamente
if ($MyInvocation.InvocationName -ne '.') {
    Show-MainMenu
}